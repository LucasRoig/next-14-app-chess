// GENERATED by @edgedb/generate v0.5.3

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
import type * as _cal from "./cal";
export type $GameResult = {
  "1-0": $.$expr_Literal<$GameResult>;
  "0-1": $.$expr_Literal<$GameResult>;
  "1/2-1/2": $.$expr_Literal<$GameResult>;
  "*": $.$expr_Literal<$GameResult>;
} & $.EnumType<"default::GameResult", ["1-0", "0-1", "1/2-1/2", "*"]>;
const GameResult: $GameResult = $.makeType<$GameResult>(_.spec, "68b9dfbe-5aea-11ef-a2bb-d7c28223b2fe", _.syntax.literal);

export type $ChessDatabaseλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "games": $.LinkDesc<$Game, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ChessDatabase = $.ObjectType<"default::ChessDatabase", $ChessDatabaseλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $ChessDatabase = $.makeType<$ChessDatabase>(_.spec, "aab2ab26-452d-11ef-bb66-dfe3a0f6b655", _.syntax.literal);

const ChessDatabase: $.$expr_PathNode<$.TypeSet<$ChessDatabase, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ChessDatabase, $.Cardinality.Many), null);

export type $GameλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "pgn": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "white": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "black": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "blackElo": $.PropertyDesc<_std.$int32, $.Cardinality.AtMostOne, false, false, false, false>;
  "date": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "result": $.PropertyDesc<$GameResult, $.Cardinality.One, false, false, false, false>;
  "whiteElo": $.PropertyDesc<_std.$int32, $.Cardinality.AtMostOne, false, false, false, false>;
  "event": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "<games[is ChessDatabase]": $.LinkDesc<$ChessDatabase, $.Cardinality.Many, {}, false, false,  false, false>;
  "<games": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Game = $.ObjectType<"default::Game", $GameλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Game = $.makeType<$Game>(_.spec, "81e35c8f-453c-11ef-8d46-2f96a408312c", _.syntax.literal);

const Game: $.$expr_PathNode<$.TypeSet<$Game, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Game, $.Cardinality.Many), null);

export type $MovieλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "actors": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
}>;
type $Movie = $.ObjectType<"default::Movie", $MovieλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Movie = $.makeType<$Movie>(_.spec, "6b60ccca-452c-11ef-a4f6-9139d3270585", _.syntax.literal);

const Movie: $.$expr_PathNode<$.TypeSet<$Movie, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Movie, $.Cardinality.Many), null);

export type $PersonλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<actors[is Movie]": $.LinkDesc<$Movie, $.Cardinality.Many, {}, false, false,  false, false>;
  "<actors": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Person = $.ObjectType<"default::Person", $PersonλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $Person = $.makeType<$Person>(_.spec, "6b5f8fb6-452c-11ef-95dd-519acee85fed", _.syntax.literal);

const Person: $.$expr_PathNode<$.TypeSet<$Person, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Person, $.Cardinality.Many), null);



export { GameResult, $ChessDatabase, ChessDatabase, $Game, Game, $Movie, Movie, $Person, Person };

type __defaultExports = {
  "GameResult": typeof GameResult;
  "ChessDatabase": typeof ChessDatabase;
  "Game": typeof Game;
  "Movie": typeof Movie;
  "Person": typeof Person
};
const __defaultExports: __defaultExports = {
  "GameResult": GameResult,
  "ChessDatabase": ChessDatabase,
  "Game": Game,
  "Movie": Movie,
  "Person": Person
};
export default __defaultExports;
